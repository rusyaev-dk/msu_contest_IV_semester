#ifndef LIST_H
#define LIST_H
#include <iostream>
#include "ListAbstract.h"
#include "Mem.h"
using namespace std;



class List:public AbstractList{
    private:
    ListNode* head;
    int num_of_elems;

    public:

    List(MemoryManager &mem): AbstractList(mem) {}

    ~List();
    // Добавление элемента в начало контейнера.
    // В случае успешного добавления функция возвращает значение 0, в случае неудачи 1.
    int push_front(void *elem, size_t elemSize);

    // Удаление элемента из начала контейнера.
    void pop_front();

    // Функция явно возвращает указатель на элемент, находящийся в начале контейнера.
    // и не явно возвращает размер данных
    void* front(size_t &size);

    // Добавление элемента в позицию, на которую указывает итератор iter.
    // В случае успешного добавления функция возвращает значение 0, в случае неудачи 1.
    int insert(Iterator *iter, void *elem, size_t elemSize);

        // Функция возвращает значение, равное количеству элементов в контейнере.
    int size();

    // Функция возвращает значение, равное максимальной вместимости контейнера в байтах.
    size_t max_bytes();

    // Функция создает в динамической памяти итератор, указывающий на первый найденный
    // в контейнере элемент. Если элемент не найден, возвращается пустой указатель.
    // Удаление этого итератора должно делаться пользователем с помощью оператора delete.
    Iterator* find(void *elem, size_t size);

    // Функция создает в динамической памяти итератор, указывающий на первый элемент
    // контейнера. Если контейнер пустой, возвращается нулевой указатель.
    // Удаление этого итератора должно делаться пользователем с помощью оператора delete.
    Iterator* newIterator();

    // Удаление элемента из позиции, на которую указывает итератор iter.
    // После удаления итератор указывает на следующий за удаленным элемент.
    void remove(Iterator *iter);

    // Удаление всех элементов из контейнера.
    void clear();

    // Если контейнер пуст возвращает true, иначе false
    bool empty();

};

#endif